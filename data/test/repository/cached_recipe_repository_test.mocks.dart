// Mocks generated by Mockito 5.3.2 from annotations
// in data/test/repository/cached_recipe_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:data/datasource/recipe_datasource.dart' as _i3;
import 'package:domain/domain.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIndexedRecipe_0 extends _i1.SmartFake implements _i2.IndexedRecipe {
  _FakeIndexedRecipe_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIndexedIngredient_1 extends _i1.SmartFake
    implements _i2.IndexedIngredient {
  _FakeIndexedIngredient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RecipeDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeDatasource extends _i1.Mock implements _i3.RecipeDatasource {
  @override
  _i4.Future<_i2.IndexedRecipe> addRecipe(_i2.Recipe? recipe) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRecipe,
          [recipe],
        ),
        returnValue: _i4.Future<_i2.IndexedRecipe>.value(_FakeIndexedRecipe_0(
          this,
          Invocation.method(
            #addRecipe,
            [recipe],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.IndexedRecipe>.value(_FakeIndexedRecipe_0(
          this,
          Invocation.method(
            #addRecipe,
            [recipe],
          ),
        )),
      ) as _i4.Future<_i2.IndexedRecipe>);
  @override
  _i4.Future<_i2.IndexedRecipe> getRecipe(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getRecipe,
          [id],
        ),
        returnValue: _i4.Future<_i2.IndexedRecipe>.value(_FakeIndexedRecipe_0(
          this,
          Invocation.method(
            #getRecipe,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.IndexedRecipe>.value(_FakeIndexedRecipe_0(
          this,
          Invocation.method(
            #getRecipe,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.IndexedRecipe>);
  @override
  _i4.Future<List<_i2.IndexedRecipe>> getAllRecipes() => (super.noSuchMethod(
        Invocation.method(
          #getAllRecipes,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.IndexedRecipe>>.value(<_i2.IndexedRecipe>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.IndexedRecipe>>.value(<_i2.IndexedRecipe>[]),
      ) as _i4.Future<List<_i2.IndexedRecipe>>);
  @override
  _i4.Future<_i2.IndexedRecipe> updateRecipe(_i2.IndexedRecipe? recipe) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecipe,
          [recipe],
        ),
        returnValue: _i4.Future<_i2.IndexedRecipe>.value(_FakeIndexedRecipe_0(
          this,
          Invocation.method(
            #updateRecipe,
            [recipe],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.IndexedRecipe>.value(_FakeIndexedRecipe_0(
          this,
          Invocation.method(
            #updateRecipe,
            [recipe],
          ),
        )),
      ) as _i4.Future<_i2.IndexedRecipe>);
  @override
  _i4.Future<void> deleteRecipe(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteRecipe,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.IndexedIngredient> addIngredient(_i2.Ingredient? ingredient) =>
      (super.noSuchMethod(
        Invocation.method(
          #addIngredient,
          [ingredient],
        ),
        returnValue:
            _i4.Future<_i2.IndexedIngredient>.value(_FakeIndexedIngredient_1(
          this,
          Invocation.method(
            #addIngredient,
            [ingredient],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.IndexedIngredient>.value(_FakeIndexedIngredient_1(
          this,
          Invocation.method(
            #addIngredient,
            [ingredient],
          ),
        )),
      ) as _i4.Future<_i2.IndexedIngredient>);
  @override
  _i4.Future<_i2.IndexedIngredient> getIngredient(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIngredient,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.IndexedIngredient>.value(_FakeIndexedIngredient_1(
          this,
          Invocation.method(
            #getIngredient,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.IndexedIngredient>.value(_FakeIndexedIngredient_1(
          this,
          Invocation.method(
            #getIngredient,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.IndexedIngredient>);
  @override
  _i4.Future<List<_i2.IndexedIngredient>> getAllIngredients() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllIngredients,
          [],
        ),
        returnValue: _i4.Future<List<_i2.IndexedIngredient>>.value(
            <_i2.IndexedIngredient>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.IndexedIngredient>>.value(
                <_i2.IndexedIngredient>[]),
      ) as _i4.Future<List<_i2.IndexedIngredient>>);
  @override
  _i4.Future<_i2.IndexedIngredient> updateIngredient(
          _i2.IndexedIngredient? ingredient) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateIngredient,
          [ingredient],
        ),
        returnValue:
            _i4.Future<_i2.IndexedIngredient>.value(_FakeIndexedIngredient_1(
          this,
          Invocation.method(
            #updateIngredient,
            [ingredient],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.IndexedIngredient>.value(_FakeIndexedIngredient_1(
          this,
          Invocation.method(
            #updateIngredient,
            [ingredient],
          ),
        )),
      ) as _i4.Future<_i2.IndexedIngredient>);
  @override
  _i4.Future<void> deleteIngredient(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteIngredient,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
